#!/usr/bin/env babel-node
"use strict";

var program = require('commander'),
    version = require('../package').version,
    doxx = require('../lib/doxx'),
    option = require('../lib/option'),
    _ = require('lodash');

/**
 * Options & Defaults
 */
var defaults = option().defaults();

program
  .version(version)
  // .option('-r, --raw', 'output \'raw\' comments, leaving the markdown intact')
  .option('-d, --debug', 'output parsed comments for debugging')
  .option('-t, --title <string>', 'The title for the page produced')
  .option('-s, --source <source>', 'The folder which should get parsed')
  .option('-i, --ignore <directories>', 'The comma seperated list of directories to ignore. Default: ' + defaults.blacklist.toString())
  .option('-T, --target <target>', 'The folder which will contain the results. Default: <CWD>/docs')
  .option('-e, --extension <target extension>', 'the Target files extension. Default: ' + defaults.extension)
  .option('--template <jade template>', 'The jade template file to use')
  .option('-R --readme <file>', 'The markdown file to use on the main page of the documentations. Checks the current directory for a package.json or README.md by default')

function showHelp(){
  console.log('  Examples:\n');
  console.log('    # parse a whole folder');
  console.log('    $ doxx --source ./lib --target ./docs\n');
  console.log('    # parse a whole folder and use a specific template');
  console.log('    $ doxx --template ./view/myowntpl.jade --source lib --target docs');
}

// examples
program.on('--help', showHelp);

// parse argv
program.parse(process.argv);

var options = option(program).getOptions();

if(!_.isEmpty(options.source))
doxx(options).generate();
