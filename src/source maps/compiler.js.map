{"version":3,"sources":["compiler.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;oBAEI,MAAM;;;;kBACN,IAAI;;;;oBACJ,MAAM;;;;QAChB,6BAA6B;;;;;;;IAK9B,QAAQ;AACD,WADP,QAAQ,CACA,MAAM,EAAE;0BADhB,QAAQ;;;;;;AAMR,QAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;;;;;AAK9B,QAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;;AAE1B,QAAI,CAAC,KAAK,EAAE,CAAC;GACd;;;;;;;;;;eAdC,QAAQ;;WAsBL,iBAAC,MAAM,EAAE,QAAQ,EAAE;;UAGpB,IAAI,GACF,IAAI,CAAC,OAAO,CAAC,QAAQ,CADvB,IAAI;;;AAGN,aAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;AAClD,cAAM,EAAE,IAAI;AACZ,gBAAQ,EAAE,IAAI;OACf,CAAC,CAAC,MAAM,CAAC,CAAC;KACZ;;;;;;;;WAKQ,qBAAC,QAAQ,EAAE;;;;;AAKpB,UAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;KAC1B;;;;;;;;WAMkB,6BAAC,IAAI,EAAE;;;;;AAKxB,UAAI,CAAC,QAAQ,GAAG,gBAAK,YAAY,CAC/B,kBAAK,OAAO,CAAC,SAAS,EAAE,IAAI,IAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;KAC7C;;;;;;;;WAOI,iBAAG;;;;;AAKN,UAAI,CAAC,IAAI,oBAAO,CAAC;;;;;;;AAOjB,UAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE;AACxC,eAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAChC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvB,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;OAC1B,CAAC;KACH;;;SArFG,QAAQ;;;qBAyFN,QAAQ","file":"compiler.js","sourcesContent":["'use strict';\n\nimport jade from 'jade';\nimport File from 'fs';\nimport Path from 'path';\nimport 'source-map-support/register';\n/**\n * The class that compiles the Jade template.\n * @class Compiler\n */\nclass Compiler {\n  constructor(parser) {\n      /**\n       * Gets the options from the parser.\n       * @type {object}\n       */\n      this.options = parser.options;\n      /**\n       * Gets the parsed files from the parser\n       * @type {Array}\n       */\n      this.files = parser.files;\n      // Set up the compiler\n      this.setup();\n    }\n    /**\n     * Compiles the docs.\n     * @param  {Object} locals local variable object\n     * @param {object} template the template\n     * @jsFiddle http://jsfiddle.net/4L6Br/embedded/\n     * @return {String} rendered content\n     */\n  compile(locals, template) {\n      // Get the path (alias for filename)\n      var {\n        path\n      } = this.options.template;\n      // Return the compiled template\n      return this.jade.compile(template || this.template, {\n        pretty: true,\n        filename: path\n      })(locals);\n    }\n    /** \n     * Sets the template\n     * @param {String} template The template\n     */\n  setTemplate(template) {\n    /**\n     * Template used to produce the documentation\n     * @type {String} template string\n     */\n    this.template = template;\n  }\n\n  /** \n   * Sets the template\n   * @param {String} path The path to the template\n   */\n  setTemplateWithPath(path) {\n    /**\n     * Template used to produce the documentation\n     * @type {String} template string\n     */\n    this.template = File.readFileSync(\n      Path.resolve(__dirname, path ||\n        this.options.template.path)).toString();\n  }\n\n\n  /**\n   * Sets up the compiler by initializing jade,\n   * the template, and the filters for jade.\n   */\n  setup() {\n    /**\n     * Jade used to compile the documentation\n     * @type {Jade} Jade compiler\n     */\n    this.jade = jade;\n\n    /**\n     * Jade support for filter `:code`\n     * @param  {String} block\n     * @return {String}\n     */\n    this.jade.filters.code = function (block) {\n      return block.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/#/g, '&#35;')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\n');\n    };\n  }\n}\n\nexport\ndefault Compiler;"],"sourceRoot":"/source/"}