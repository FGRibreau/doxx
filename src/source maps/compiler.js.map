{"version":3,"sources":["compiler.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;oBAEI,MAAM;;;;kBACR,IAAI;;;;oBACF,MAAM;;;;;;;;;IAMjB,QAAQ;AACD,WADP,QAAQ,CACA,MAAM,EAAE;0BADhB,QAAQ;;;;;;AAMR,QAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;;;;;AAK9B,QAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;;AAE1B,QAAI,CAAC,KAAK,EAAE,CAAC;GACd;;;;;;;;;eAdC,QAAQ;;WAqBL,iBAAC,MAAM,EAAE;;UAGV,IAAI,GACF,IAAI,CAAC,OAAO,CAAC,QAAQ,CADvB,IAAI;;;AAGN,aAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE;AACtC,cAAM,EAAE,IAAI;AACZ,gBAAQ,EAAE,IAAI;OACf,CAAC,CAAC,MAAM,CAAC,CAAC;KACZ;;;;;;;;WAKE,iBAAG;;;;;AAKN,UAAI,CAAC,IAAI,oBAAO,CAAC;;;;;AAKjB,UAAI,CAAC,QAAQ,GAAG,gBAAG,YAAY,CAAC,kBAAK,OAAO,CAC1C,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;;;;;;AAMrD,UAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,UAAU,KAAK,EAAE;AACxC,eAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAChC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvB,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;OAC1B,CAAC;KACH;;;SA9DG,QAAQ;;;qBAkEN,QAAQ","file":"compiler.js","sourcesContent":["'use strict';\n\nimport jade from 'jade';\nimport fs from 'fs';\nimport path from 'path';\n\n/**\n * The class that compiles the Jade template.\n * @class Compiler\n */\nclass Compiler {\n  constructor(parser) {\n      /**\n       * Gets the options from the parser.\n       * @type {object}\n       */\n      this.options = parser.options;\n      /**\n       * Gets the parsed files from the parser\n       * @type {Array}\n       */\n      this.files = parser.files;\n      // Set up the compiler\n      this.setup();\n    }\n    /**\n     * Compiles the docs.\n     * @param  {Object} locals local variable object\n     * @jsFiddle http://jsfiddle.net/4L6Br/embedded/\n     * @return {String} rendered content\n     */\n  compile(locals) {\n      // Get the path (alias for filename)\n      var {\n        path\n      } = this.options.template;\n      // Return the compiled template\n      return this.jade.compile(this.template, {\n        pretty: true,\n        filename: path\n      })(locals);\n    }\n    /**\n     * Sets up the compiler by initializing jade,\n     * the template, and the filters for jade.\n     */\n  setup() {\n    /**\n     * Jade used to compile the documentation\n     * @type {Jade} Jade compiler\n     */\n    this.jade = jade;\n    /**\n     * Template used to produce the documentation\n     * @type {String} template string\n     */\n    this.template = fs.readFileSync(path.resolve(\n      __dirname, this.options.template.path)).toString();\n    /**\n     * Jade support for filter `:code`\n     * @param  {String} block\n     * @return {String}\n     */\n    this.jade.filters.code = function (block) {\n      return block.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/#/g, '&#35;')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\\n/g, '\\\\n');\n    };\n  }\n}\n\nexport\ndefault Compiler;"],"sourceRoot":"/source/"}