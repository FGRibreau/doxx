{"version":3,"sources":["theme.js"],"names":[],"mappings":"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","file":"theme.js","sourcesContent":["'use strict';\nimport when from 'when';\nimport Path from 'path';\nimport _ from 'lodash';\nimport fs from 'fs';\nimport File from 'fs-extra';\nimport elegantSpinner from 'elegant-spinner';\nimport logUpdate from 'log-update';\nimport 'source-map-support/register';\n\nlet frame = elegantSpinner();\n\n/**\n * The class that locates themes\n * @class  Theme\n */\nclass Theme {\n  constructor(options) {\n\n    let resolved = {\n      theme: this.locateTheme(options.theme)\n    };\n\n    this.options = {\n      theme: {\n        name: resolved.theme.name,\n        path: resolved.theme.path\n      },\n      target: {\n        path: options.target\n      }\n    };\n\n  }\n\n  /**\n   * Find the theme specified\n   */\n  locateTheme(theme) {\n\n    const DEFAULT_THEME = 'doxx-theme-default';\n\n    const doxxPath = Path.resolve(__dirname, '..');\n    const projectPath = process.cwd();\n\n    const locations = {\n      project: Path.join(projectPath,\n        'node_modules',\n        theme),\n      doxx: Path.join(doxxPath,\n        'node_modules',\n        theme),\n      default: Path.join(doxxPath,\n        'node_modules',\n        DEFAULT_THEME)\n    };\n\n\n    let exists = fs.existsSync(locations.doxx);\n    if (exists) {\n      console.log('Doxx [info]: Using theme [' + theme + ']');\n      return {\n        name: theme,\n        path: locations.doxx\n      };\n    }\n\n    exists = fs.existsSync(locations.project);\n    if (exists) {\n      console.log('Doxx [info]: Using theme [' + theme + ']');\n      return {\n        name: theme,\n        path: locations.project\n      };\n    }\n\n    console.log('Doxx [warning]: theme \"' +\n      theme +\n      '\" not found, reverting to default.');\n\n    return {\n      name: DEFAULT_THEME,\n      path: locations.default\n    };\n\n  }\n\n  /** \n   * Copies the theme specified (reverting to default)\n   * over to the target directory.\n   */\n  static configure(options) {\n\n      let final = when.defer();\n\n      // Sources\n      let config = {\n        src: options.theme.path,\n        dest: options.target.path,\n        paths: {\n          css: {\n            src: 'assets/css',\n            dest: 'css'\n          },\n          js: {\n            src: 'assets/js',\n            dest: 'js'\n          }\n        }\n      };\n\n      /** \n       * The commands to install the theme\n       * @type {object}\n       */\n      let commands = {\n        showProgress: (command) => {\n          var count = 0;\n          while (count < 200) {\n            logUpdate('Doxx [info]: ' + frame() + ' ' + command);\n            count++;\n          }\n        },\n        /**\n         * Create necessary paths to destination folder\n         */\n        copyAssets: () => {\n          let types = _.keys(config.paths);\n          let m = when.map(types, function (type) {\n            let d = when.defer();\n            let src = Path.join(config.src, config.paths[type].src);\n            let dest = Path.join(config.dest, config.paths[type].dest);\n            File.copy(src, dest, {\n              clobber: true\n            }, error => {\n              if (error) d.reject(error);\n              else {\n                d.resolve();\n              }\n            });\n            return d.promise;\n          });\n          return m;\n        },\n        /** \n         * Reads the template from the source and strigifies it.\n         */\n        stringifyTemplate: () => {\n          let d = when.defer();\n          let file = Path.join(config.src, 'template/index.jade');\n          File.readFile(file, (error, data) => {\n            if (error) d.reject(error);\n            else d.resolve({\n              template: data.toString()\n            });\n          });\n          return d.promise;\n        }\n      };\n\n      // Check if the template is enabled (legacy)\n      if (options.template && options.template.path) {\n        final.resolve({\n          template: File.readFileSync(\n            Path.resolve(__dirname,\n              options.template.path)).toString()\n        });\n      } else {\n        (() => {\n          return commands.copyAssets()\n            .then(commands.stringifyTemplate)\n            .then(final.resolve);\n        })(commands.showProgress);\n      }\n      return final.promise;\n    }\n    /** \n     * Copies the specific theme assets over to the target directory\n     * and returns the     \n     */\n  install() {\n    return Theme.configure(this.options);\n  }\n}\n\nexport default Theme;"],"sourceRoot":"/source/"}