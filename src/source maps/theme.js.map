{"version":3,"sources":["theme.js"],"names":[],"mappings":"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","file":"theme.js","sourcesContent":["/* global __dirname, process, console */\n'use strict';\nimport when from 'when';\nimport Path from 'path';\nimport _ from 'lodash';\nimport File from 'fs-extra';\nimport elegantSpinner from 'elegant-spinner';\nimport logUpdate from 'log-update';\nimport Dir from './dir';\nimport 'source-map-support/register';\nlet frame = elegantSpinner();\n/**  \n * The class that locates themes  \n * @class Theme  \n */\nclass Theme {\n  constructor(options) {\n      let resolved = {\n        theme: options.template.path ? undefined : Theme.findTheme(options.theme)\n      };\n      this.options = {\n        theme: {\n          name: resolved.theme ?\n            resolved.theme.name : options.theme.name || options.theme,\n          path: resolved.theme.path\n        },\n        target: {\n          path: options.target\n        },\n        template: {\n          name: options.package ?\n            options.package.name : '',\n          path: options.template.path,\n          isKit: () => {\n            return options.kit;\n          }\n        }\n      };\n    }\n    /**    \n     * Returns the tasks that install the theme    \n     * @private    \n     * @param options The options to install the themes    \n     * @return {object}    \n     */\n  static tasks(options) {\n      // Sources     \n      let config = {\n        src: options.template.path ?\n          options.template.path : options.theme.path,\n        dest: options.target.path,\n        paths: {\n          css: {\n            src: 'assets/css',\n            dest: 'css'\n          },\n          js: {\n            src: 'assets/js',\n            dest: 'js'\n          }\n        }\n      };\n      return {\n        /**        \n         * Shows the progress for each command        \n         */\n        showProgress: (command, max = 200) => {\n          var count = 0;\n          while (count < max) {\n            logUpdate('Mr. Doc [info]: ' + frame() + ' ' + command);\n            count++;\n          }\n        },\n        /**\n         * Create necessary paths to destination folder (Async)        \n         */\n        copyAssets: () => {\n          let types = _.keys(config.paths);\n          let m = when.map(types, function(type) {\n            let d = when.defer();\n            let src = Path.join(config.src, config.paths[type].src);\n            let dest = Path.join(config.dest, config.paths[type].dest);\n            File.copy(src, dest, {\n              clobber: true\n            }, error => {\n              if (error) d.reject(error);\n              else {\n                d.resolve();\n              }\n            });\n            return d.promise;\n          });\n          return m;\n        },\n        /**        \n         * Create necessary paths to destination folder (Sync)       \n         */\n        copyAssetsSync: () => {\n          let types = _.keys(config.paths);\n          _.forEach(types, type => {\n            let src = Path.join(config.src, config.paths[type].src);\n            let dest = Path.join(config.dest, config.paths[type].dest);\n            File.copySync(src, dest, {\n              clobber: true\n            });\n          });\n        },\n        /**        \n         * Reads the template from the source and strigifies it. (Async)        \n         */\n        stringifyTemplate: () => {\n          let d = when.defer();\n          let file = Path.join(config.src, 'template/index.jade');\n          File.readFile(file, (error, data) => {\n            if (error) d.reject(error);\n            else d.resolve({\n              template: data.toString()\n            });\n          });\n          return d.promise;\n        },\n        /**        \n         * Reads the template from the source and strigifies it. (Sync)        \n         */\n        stringifyTemplateSync: () => {\n          let file = Path.join(config.src, 'template/index.jade');\n          return File.readFileSync(file);\n        }\n      };\n    }\n    /**    \n     * Find the theme specified    \n     * @param {String} theme The theme to find    \n     * @return {Object} The theme.    \n     */\n  static findTheme(theme) {\n      const DEFAULT_THEME = 'mr-doc-theme-default';\n      const mrDocPath = Path.resolve(__dirname, '..');\n      const projectPath = process.cwd();\n      // Plugins may provide a name property\n      // so just in case check it\n      theme = theme.name ? theme.name : theme;\n      const locations = {\n        // Path to the project's node_modules dir + theme       \n        project: Path.join(projectPath, 'node_modules', theme),\n        // Path to Doc's node_modules dir + theme       \n        mrDoc: Path.join(mrDocPath, 'node_modules', theme),\n        // Path to the Doc's default theme dir       \n        default: Path.join(mrDocPath, 'node_modules', DEFAULT_THEME)\n      };\n      if (Dir.exists(locations.mrDoc)) {\n        console.log('Mr. Doc [info]: Using theme [' + theme + ']');\n        return {\n          name: theme,\n          path: locations.mrDoc\n        };\n      } else if (Dir.exists(locations.project)) {\n        console.log('Mr. Doc [info]: Using theme [' + theme + ']');\n        return {\n          name: theme,\n          path: locations.project\n        };\n      } else {\n        console.log('Mr. Doc [warn]: Theme \"' + theme + '\" not found, reverting to default.');\n        return {\n          name: DEFAULT_THEME,\n          path: locations.default\n        };\n      }\n    }\n    /**    \n     * Copies the theme specified (reverting to default)    \n     * over to the target directory. (Async)  \n     * @return {Function} The promise.    \n     */\n  install(options = this.options) {\n      let final = when.defer();\n      // Check if the template is enabled (legacy)       \n      if (options.template.isKit &&\n        !options.template.isKit()) {\n        if (options.tempate.isKit && !options.template.isKit()) {\n          final.resolve({\n            template: File.readFileSync(Path.resolve(__dirname, options.template.path)).toString()\n          });\n        }\n      } else {\n        let tasks = Theme.tasks(options);\n        ((notify) => {\n          return tasks.copyAssets()\n            .tap(() => {\n              notify('Copying Assets.');\n            })\n            .then(tasks.stringifyTemplate)\n            .tap(() => {\n              notify('Rendering template.');\n            })\n            .then(final.resolve);\n        })(tasks.showProgress);\n      }\n      return final.promise;\n    }\n    /**      \n     * Copies the theme specified (reverting to default)    \n     * over to the target directory. (Sync)\n     * @return The template    \n     */\n  installSync(options = this.options) {\n    if (options.template.isKit &&\n      !options.template.isKit()) {\n      return {\n        template: File.readFileSync(Path.resolve(__dirname, options.template.path)).toString()\n      };\n    } else {\n      let tasks = Theme.tasks(options);\n      tasks.copyAssetsSync();\n      tasks.showProgress('Copying assets.');\n      tasks.stringifyTemplateSync();\n      tasks.showProgress('Reading template.');\n      tasks.showProgress('Done.');\n    }\n    return {\n      template: ''\n    };\n  }\n}\nexport default Theme;"],"sourceRoot":"/source/"}