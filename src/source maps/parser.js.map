{"version":3,"sources":["parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import Symbol from './symbol';\nimport _ from 'lodash';\nimport path from 'path';\nimport Dir from './dir';\nimport dox from 'dox';\nimport fs from 'fs';\n\n/**\n * The class that parses the dox tags.\n * @class Parser\n */\nclass Parser {\n  constructor(options) {\n      if (options) {\n        this.options = options;\n        this.start();\n      }\n    }\n    /**\n     * Starts the parser.\n     */\n  start() {\n      var {\n        source, extension, blacklist\n      } = this.options;\n\n      if (_.isArray(source)) {\n        this.files = source.map(doc => {\n          var targetName = doc.name + '.' + extension;\n          if (!doc.targetName) doc.targetName = targetName;\n          doc.symbols = this.structure(doc.dox, doc.targetName);\n          return doc;\n        });\n      } else {\n        source = path.resolve(process.cwd(), source);\n        this.files = Dir.collectFiles(source, {\n          ignore: blacklist\n        });\n        this.files = this.files.map(file => {\n          var dox = this.parse(path.join(source, file));\n          var targetName = file + '.' + extension;\n          return {\n            name: file.replace(/\\\\/g, '/'),\n            targetName: targetName.replace(/\\\\/g, '/'),\n            dox: dox,\n            symbols: this.structure(dox, targetName)\n          };\n        });\n      }\n    }\n    /**\n     * Parses the source using dox.\n     * @param {string} filepath The path to the source \n     * @returns {object} Returns a JSON representation of the tags as an array\n     * @example\n     * {\n     *\ttags:[]\n     *\tdescription:{\n     *\tfull:\"\"\n     *\tsummary:\"\"\n     *\tbody:\"\"\n     * \t}\n     *\tignore:false\n     * \tisPrivate:false\n     * \tctx:{\n     *\t  type:\"declaration\"\n     * \t  name:\"\"\n     * \t\tvalue:[]\n     *\t\tstring:\"\"\n     *\t}\n     * }\n     */\n  parse(filepath) {\n      var json = null;\n      try {\n        json = dox.parseComments(fs.readFileSync(filepath).toString(), {\n          raw: false\n        });\n      } catch (e) {\n        console.error('doxx:', e);\n        return [];\n      }\n\n      return json.filter(this.shouldPass).map(Symbol.map);\n    }\n    /**\n     * Tests if a symbol should be ignored or not.\n     * @param  {Object} symbol symbol to check against\n     * @returns {Boolean} true if the symbol is not private nor must be ignored\n     */\n  shouldPass(symbol) {\n      if (symbol.isPrivate) {\n        return false;\n      }\n      if (symbol.ignore) {\n        return false;\n      }\n\n      // Only for coffeescript\n      return symbol.tags.filter(function (tag) {\n        return tag.type === 'private' || tag.type === 'ignore';\n      }).length === 0;\n    }\n    /**\n     * Returns the structure of a parsed file\n     * @param  {Array} symbols  array of symbols\n     * @param  {String} file    filename\n     * @returns {Array}\n     */\n  structure(symbols, file) {\n    return _.compact(symbols.map(function (method) {\n      if (!method.ctx || !method.ctx.name) {\n        return null;\n      }\n      return {\n        targetFile: file,\n        name: method.ctx.name,\n        type: method.ctx.type\n      };\n    })) || [];\n  }\n}\n\nexport default (options) => {\n  'use strict';\n  return new Parser(options);\n};"],"sourceRoot":"/source/"}