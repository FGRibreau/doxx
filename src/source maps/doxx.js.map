{"version":3,"sources":["doxx.js"],"names":[],"mappings":"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","file":"doxx.js","sourcesContent":["/*! global process */\n'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport Compiler from './compiler';\nimport parser from './parser';\nimport Markdown from 'markdown-it';\nimport mkdirp from 'mkdirp';\n/**\n * The main class that creates beautiful documentations.\n * @class Doxx\n * @extend Compiler\n */\nclass Doxx extends Compiler {\n  // Initialize the compiler\n  // and pass the parser.\n  constructor(options) {\n      super(parser(options));\n    }\n    /**\n     * Generates the documentations.\n     */\n  generate() {\n    // Compute all symboles\n    var allSymbols = this.files.reduce(function (m, a) {\n      m = m.concat(a.symbols || []);\n      return m;\n    }, []);\n\n    var pkg;\n    // Get package.json\n    try {\n      pkg = require(process.cwd() + '/package');\n    } catch (err) {}\n\n    var readme = pkg && pkg.readme,\n      readMeFile = path.resolve(process.cwd(), this.options.readme ||\n        (pkg && pkg.readmeFileName) || 'README.md');\n\n    if (!readme && fs.existsSync(readMeFile)) {\n      readme = fs.readFileSync(readMeFile).toString();\n    } else {\n      console.warn(new Error('No README.md file found at ' + readMeFile));\n    }\n\n    if (!readme) {\n      console.warn(new Error('Empty README.md ' + readMeFile));\n      readme = '';\n    }\n\n    var md = new Markdown();\n    md = md.render.bind(md);\n\n    // Get readme data\n    this.files.unshift({\n      name: 'Main',\n      targetName: 'index.html',\n      readme: md(readme),\n      dox: [],\n      symbols: []\n    });\n\n    // Make sure the folder structure in target mirrors source\n    var folders = [];\n\n    this.files.forEach(file => {\n      var folder = file.targetName\n        .substr(0, file.targetName.lastIndexOf(path.sep));\n\n      if ((folder !== '') && (folders.indexOf(folder) === -1)) {\n        folders.push(folder);\n        mkdirp.sync(this.options.target + '/' + folder);\n      }\n    });\n\n    // Render and write each file\n    this.files.forEach(file => {\n\n      // Set each files relName in relation \n      // to where this file is in the directory tree\n      this.files.forEach(function (f) {\n\n        // Count how deep the current file is in relation to base\n        var count = file.name.split('/');\n        count = count === null ? 0 : count.length - 1;\n\n        // relName is equal to targetName at the base dir\n        f.relName = f.targetName;\n\n        // For each directory in depth of current file \n        // add a ../ to the relative filename of this link\n        while (count > 0) {\n          f.relName = '../' + f.relName;\n          count--;\n        }\n      });\n\n      // Set title\n      var title = pkg && pkg.name ? pkg.name :\n        this.options.title;\n\n      // Set description\n      var description = pkg && pkg.description ?\n        pkg.description : '';\n\n      // Set locals\n      var locals = _.extend({}, file, {\n        project: {\n          title, description\n        },\n        allSymbols: allSymbols,\n        files: this.files,\n        currentName: file.name\n      });\n\n      // Compile\n      var compiled = this.compile(locals);\n\n      // Write files\n      mkdirp(this.options.target, err => {\n        if (err) return;\n        else\n          fs.writeFileSync(path.join(\n              this.options.target, file.targetName),\n            compiled);\n      });\n    });\n  }\n}\nexport default function (options) {\n  return new Doxx(options);\n}"],"sourceRoot":"/source/"}