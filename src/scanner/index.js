"use strict";
const Scanner_1 = require('./Scanner');
const token_1 = require('../token');
const _1 = require('../stream/');
const location_1 = require('../location');
const Match_1 = require('../utils/Match');
const _ = require('lodash');
class CommentScanner extends Scanner_1.default {
    constructor(source, location) {
        super(source, location);
    }
    scan() {
        while (!this.ended) {
            this.lexeme = [];
            const ch = this.current();
            if (Match_1.default.isLetterOrDigit(ch) || '\'\"[].'.includes(ch)) {
                this.addToken(this.scanString());
            }
            else if (Match_1.default.isLineTerminator(ch)) {
                this.addToken(this.scanSimpleChar(), true);
            }
            else if (Match_1.default.isNullTerminator(ch)) {
                this.addToken(this.scanNullTerminator());
            }
            else if (ch === '@') {
                this.addToken(this.scanTag());
            }
            else if (ch === '-') {
                this.addToken(this.scanMinus());
            }
            else if (':?|&,'.includes(ch)) {
                this.addToken(this.scanSimpleChar());
            }
            else if (ch === '=') {
                this.addToken(this.scanEqualOrArrow());
            }
            else if ('()'.includes(ch)) {
                this.addToken(this.scanParenthesis());
            }
            else {
                this.next();
            }
        }
        return new _1.TokenStream(this.tokens);
    }
    scanSimpleChar() {
        const ch = this.current();
        const start = this.location;
        const lexeme = this.next();
        const end = this.location;
        const type = token_1.getTokenType(ch);
        return new token_1.default(lexeme, type, new location_1.Range(start, end));
    }
    scanString() {
        const start = this.location;
        const previous = this.tokens.length > 0 ? this.previousToken :
            new token_1.default('', token_1.TokenType.None, new location_1.Range(start, null));
        const isEnd = (ch) => Match_1.default.isSpace(ch) || Match_1.default.isNullTerminator(ch);
        const filter = (type, ch) => ({
            [token_1.TokenType.Any]: !isEnd(ch) && !'&|,)-'.includes(ch),
            [token_1.TokenType.Identifier]: !isEnd(ch) && !'?:)-,'.includes(ch),
            [token_1.TokenType.Initializer]: !isEnd(ch) && !',)-'.includes(ch),
            [token_1.TokenType.Description]: !Match_1.default.isLineTerminator(ch) && !Match_1.default.isNullTerminator(ch)
        }[type]);
        const consume = (type) => {
            while (filter(type, this.current())) {
                this.lexeme.push(this.next());
            }
            const { Any, Ampersand, Pipe, Identifier, LeftParen } = token_1.TokenType;
            if (type === Identifier) {
                // Skip whitespace
                while (Match_1.default.isWhiteSpace(this.current())) {
                    this.next();
                }
                // ... =>  (... | any) || (... & any )
                if (previous && previous.type === LeftParen) {
                    if ('&|'.includes(this.current())) {
                        type = Any;
                    }
                }
                else if (previous && _.includes([Pipe, Ampersand], previous.type)) {
                    type = Any;
                }
            }
            const end = this.location;
            return new token_1.default(this.lexeme.join(''), type, new location_1.Range(start, end));
        };
        const { Tag, LeftParen, Comma } = token_1.TokenType;
        if (_.includes([Tag, LeftParen, Comma], previous.type) && !this.isTagTerminated) {
            return consume(token_1.TokenType.Identifier);
        }
        else {
            this.history = [];
        }
        const { Colon, Arrow, Pipe, Ampersand } = token_1.TokenType;
        if (_.includes([Colon, Arrow, Pipe, Ampersand], previous.type)) {
            return consume(token_1.TokenType.Any);
        }
        if (previous.type === token_1.TokenType.Equal) {
            return consume(token_1.TokenType.Initializer);
        }
        return consume(token_1.TokenType.Description);
    }
    scanNullTerminator() {
        const start = this.location;
        this.lexeme.push(this.next());
        const end = this.location;
        return new token_1.default(this.lexeme.join(''), token_1.TokenType.NullTerminator, new location_1.Range(start, end));
    }
    scanTag() {
        const start = this.location;
        const isEnd = (ch) => Match_1.default.isSpace(ch) || Match_1.default.isNullTerminator(ch);
        while (!isEnd(this.current()) && this.current() !== ':') {
            this.lexeme.push(this.next());
        }
        const end = this.location;
        return new token_1.default(this.lexeme.join(''), token_1.TokenType.Tag, new location_1.Range(start, end));
    }
    scanMinus() {
        const start = this.location;
        const previous = this.tokens[this.tokens.length - 1];
        const isInitializer = previous && previous.type === token_1.TokenType.Equal && this.current() === '-' && Match_1.default.isDigit(this.peek(1));
        const isMarkdown = this.current() + this.peek(1) + this.peek(2) === '---';
        let type = token_1.TokenType.None;
        if (isInitializer) {
            this.lexeme.push(this.next());
            while (Match_1.default.isDigit(this.current())) {
                this.lexeme.push(this.next());
            }
            type = token_1.TokenType.Initializer;
        }
        else if (isMarkdown) {
            type = this.scanMarkdown();
        }
        else {
            this.lexeme.push(this.next());
            type = token_1.TokenType.Minus;
        }
        const end = this.location;
        return new token_1.default(this.lexeme.join(''), type, new location_1.Range(start, end));
    }
    scanMarkdown() {
        const isMarkdownTag = (m1, m2, m3) => m1 + m2 + m3 === '---';
        const isCommentStar = (col) => (col === 0 || col === 1) && this.current() === '*';
        let starEnabled = this.peek(-1) === '*';
        // Consume the first three lexemes
        this.consume(3, this.lexeme);
        // Keep consuming the lexemes until markdown ends
        while (!isMarkdownTag(this.current(), this.peek(1), this.peek(2))) {
            if (isCommentStar(this.location.column) && starEnabled) {
                this.next();
            }
            else {
                this.lexeme.push(this.next());
            }
        }
        // Consume the last three lexemes
        if (isMarkdownTag(this.current(), this.peek(1), this.peek(2))) {
            this.consume(3, this.lexeme);
        }
        return token_1.TokenType.Markdown;
    }
    scanEqualOrArrow() {
        const start = this.location;
        const lexeme = this.peek(1) === '>' ? this.next() + this.next() : this.next();
        const end = this.location;
        return new token_1.default(lexeme, token_1.getTokenType(lexeme), new location_1.Range(start, end));
    }
    scanParenthesis() {
        const start = this.location;
        const lexeme = this.next();
        const end = this.location;
        const type = lexeme === '(' ? token_1.TokenType.LeftParen : token_1.TokenType.RightParen;
        return new token_1.default(lexeme, type, new location_1.Range(start, end));
    }
    get isTagTerminated() {
        // Get the token from history which contains eols
        const prev0 = this.previousTokenFromHistory, 
        // Get the previous token that does not have eols
        prev1 = this.previousToken, { LineTerminator, Tag } = token_1.TokenType;
        return prev0 && prev0.type === LineTerminator && prev1.type === Tag;
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CommentScanner;
//# sourceMappingURL=data:application/json;base64,