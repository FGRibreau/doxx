"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const token_1 = require("../token");
const _1 = require("../stream/");
const location_1 = require("../location");
const Match_1 = require("../utils/Match");
const _ = require("lodash");
let _position = 0, _line = 1, _column = 1;
let _stream = "";
let _lexeme, _tokens = [];
let _previousToken;
function isEOF() { return (_position >= _stream.length || Match_1.default.isNullTerminator(current())); }
function current() { return _stream[_position]; }
function next() {
    const ch = _stream[++_position];
    if (Match_1.default.isLineTerminator(ch)) {
        _line++;
        _column = 1;
    }
    else {
        _column++;
    }
    return ch;
}
function previous() {
    const ch = _stream[--_position];
    if (Match_1.default.isLineTerminator(ch)) {
        _line--;
        _column = 1;
    }
    else {
        _column--;
    }
    return ch;
}
function peek(to) { return _stream[_position + to]; }
function consume(to, array) {
    let i = 0;
    while (i < Math.abs(to)) {
        const s = to < 0 ? previous() : accept();
        if (array) {
            array.push(s);
        }
        i++;
    }
}
function accept() { const ch = current(); next(); return ch; }
function scan() {
    _lexeme = [];
    while (Match_1.default.isWhiteSpace(current())) {
        next();
    }
    ;
    if (isEOF()) {
        return new token_1.default('\0', token_1.TokenType.EOF, location_1.location(_position, _line, _column));
    }
    else if (Match_1.default.isLetterOrDigit(current()) || '\'\"[]{}.'.includes(current())) {
        return scanName();
    }
    else if (Match_1.default.isLineTerminator(current())) {
        return scanSimpleChar();
    }
    else if (current() === '@') {
        return scanTag();
    }
    else if (current() === '-') {
        return scanMinus();
    }
    else if (':?|&,'.includes(current())) {
        return scanSimpleChar();
    }
    else if (current() === '=') {
        return scanEqualOrArrow();
    }
    else if ('()'.includes(current())) {
        return scanParenthesis();
    }
    else {
        next();
    }
}
function scanName() {
    const isEnd = (ch) => Match_1.default.isSpace(ch) && Match_1.default.isNullTerminator(ch);
    const filter = (type, ch) => ({
        [token_1.TokenType.Any]: !isEnd(ch) && !'&|,)-='.includes(ch) && !Match_1.default.isSpace(ch),
        [token_1.TokenType.Identifier]: !isEnd(ch) && !'?:)-=,'.includes(ch) && !Match_1.default.isSpace(ch),
        [token_1.TokenType.Initializer]: !isEnd(ch) && !',)-='.includes(ch) && !Match_1.default.isSpace(ch),
        [token_1.TokenType.Description]: !Match_1.default.isLineTerminator(ch) && !Match_1.default.isNullTerminator(ch)
    }[type]);
    const consume = (type) => {
        while (filter(type, current()) && !isEOF()) {
            _lexeme.push(accept());
        }
        const { Any, Ampersand, Pipe, Identifier, LeftParen } = token_1.TokenType;
        if (type === Identifier) {
            // Skip whitespace
            while (Match_1.default.isWhiteSpace(current())) {
                next();
            }
            // ... =>  (... | any) || (... & any )
            if (_previousToken && _previousToken.type === LeftParen) {
                if ('&|'.includes(current())) {
                    type = Any;
                }
            }
            else if (_previousToken && _.includes([Pipe, Ampersand], _previousToken.type)) {
                type = Any;
            }
        }
        return new token_1.default(_lexeme.join(''), type, location_1.location(_position, _line, _column));
    };
    const { Tag, LeftParen, Comma } = token_1.TokenType;
    if (_previousToken && _.includes([Tag, LeftParen, Comma], _previousToken.type)) {
        return consume(token_1.TokenType.Identifier);
    }
    const { Colon, Arrow, Pipe, Ampersand } = token_1.TokenType;
    if (_previousToken && _.includes([Colon, Arrow, Pipe, Ampersand], _previousToken.type)) {
        return consume(token_1.TokenType.Any);
    }
    if (_previousToken && _previousToken.type === token_1.TokenType.Equal) {
        return consume(token_1.TokenType.Initializer);
    }
    return consume(token_1.TokenType.Description);
}
function scanSimpleChar() {
    const ch = accept();
    const type = token_1.getTokenType(ch);
    return new token_1.default(ch, type, location_1.location(_position, _line, _column));
}
function scanTag() {
    while (current() !== ':' && !Match_1.default.isWhiteSpace(current()) && !isEOF()) {
        _lexeme.push(accept());
    }
    return new token_1.default(_lexeme.join(''), token_1.TokenType.Tag, location_1.location(_position, _line, _column));
}
function scanMinus() {
    const isInitializer = _previousToken &&
        _previousToken.type === token_1.TokenType.Equal &&
        current() === '-' && Match_1.default.isDigit(peek(1));
    const isMarkdown = current() + peek(1) + peek(2) === '---';
    let type = token_1.TokenType.None;
    if (isInitializer) {
        _lexeme.push(accept());
        while (Match_1.default.isDigit(current())) {
            _lexeme.push(accept());
        }
        type = token_1.TokenType.Initializer;
    }
    else if (isMarkdown) {
        type = scanMarkdown();
    }
    else {
        _lexeme.push(accept());
        type = token_1.TokenType.Minus;
    }
    return new token_1.default(_lexeme.join(''), type, location_1.location(_position, _line, _column));
}
function scanMarkdown() {
    const isMarkdownTag = (m1, m2, m3) => m1 + m2 + m3 === '---';
    const isCommentStar = (col) => (col === 0 || col === 1) && current() === '*';
    let starEnabled = peek(-1) === '*';
    // Consume the first three lexemes
    consume(3, _lexeme);
    // Keep consuming the lexemes until markdown ends
    while (!isMarkdownTag(current(), peek(1), peek(2))) {
        if (isCommentStar(_column) && starEnabled) {
            next();
        }
        else {
            _lexeme.push(accept());
        }
    }
    // Consume the last three lexemes
    if (isMarkdownTag(current(), peek(1), peek(2))) {
        consume(3, _lexeme);
    }
    return token_1.TokenType.Markdown;
}
function scanEqualOrArrow() {
    const lexeme = peek(1) === '>' ? accept() + accept() : accept();
    return new token_1.default(lexeme, token_1.getTokenType(lexeme), location_1.location(_position, _line, _column));
}
function scanParenthesis() {
    const lexeme = accept();
    const type = lexeme === '(' ? token_1.TokenType.LeftParen : token_1.TokenType.RightParen;
    return new token_1.default(lexeme, type, location_1.location(_position, _line, _column));
}
function Scanner(source) {
    _position = 0;
    _line = _column = 1;
    _stream = source ? `${source}\u{0000}` : '\u{0000}';
    _tokens = [];
    _previousToken = null;
    const getToken = () => { _previousToken = scan(); return _previousToken; };
    return {
        scan: function scan() { return _previousToken = getToken(); },
        toTokenStream: function toTokenStream() {
            let token = getToken();
            while (token.type !== token_1.TokenType.EOF) {
                _tokens.push(token);
                token = getToken();
            }
            _tokens.push(token);
            return new _1.TokenStream(_tokens);
        },
        position: function position() { return _position; },
        line: function line() { return _line; },
        column: function column() { return _column; },
        eof: isEOF
    };
}
exports.default = Scanner;
//# sourceMappingURL=data:application/json;base64,