"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const token_1 = require("../token");
const _1 = require("../stream/");
const location_1 = require("../location");
const Match_1 = require("../utils/Match");
const _ = require("lodash");
let _position = 0, _line = 1, _column = 1;
let _stream = "";
let _lexeme, _tokens = [];
let _previousToken;
function isEOF() { return _position >= _stream.length - 1; }
function current() { return _stream[_position]; }
function next() {
    const ch = _stream[++_position];
    if (Match_1.default.isLineTerminator(ch)) {
        _line++;
        _column = 1;
    }
    else {
        _column++;
    }
    return ch;
}
function previous() {
    const ch = _stream[--_position];
    if (Match_1.default.isLineTerminator(ch)) {
        _line--;
        _column = 1;
    }
    else {
        _column--;
    }
    return ch;
}
function peek(to) { return _stream[_position + to]; }
function consume(to, array) {
    let i = 0;
    while (i < Math.abs(to)) {
        const s = to < 0 ? previous() : accept();
        if (array) {
            array.push(s);
        }
        i++;
    }
}
function accept() { const ch = current(); next(); return ch; }
function scan() {
    _lexeme = [];
    while (Match_1.default.isWhiteSpace(current()) && !isEOF()) {
        next();
    }
    ;
    // console.log(current());
    if (isEOF()) {
        return new token_1.default('\0', token_1.TokenKind.EOF, location_1.location(_position, _line, _column));
    }
    else if (Match_1.default.isLetterOrDigit(current()) || '\'\"[]{}.'.includes(current())) {
        return scanName();
    }
    else if (current() === '@') {
        return scanTag();
    }
    else if (current() === '-') {
        return scanMinus();
    }
    else if (current() === '+' && peek(1) === '-' && peek(2) === '-') {
        return scanMarkdown();
    }
    else if (':?|&,'.includes(current())) {
        return scanSimpleChar();
    }
    else if (current() === '=') {
        return scanEqualOrArrow();
    }
    else if ('()'.includes(current())) {
        return scanParenthesis();
    }
    else {
        return new token_1.default(accept(), token_1.TokenKind.None, location_1.location(_position, _line, _column));
    }
}
function scanName() {
    const filter = (kind, ch) => ({
        [token_1.TokenKind.Any]: !Match_1.default.isSpace(ch) && !'&|,)-='.includes(ch) && !Match_1.default.isSpace(ch),
        [token_1.TokenKind.Identifier]: !Match_1.default.isSpace(ch) && !'?:)-=,'.includes(ch) && !Match_1.default.isSpace(ch),
        [token_1.TokenKind.Initializer]: !Match_1.default.isSpace(ch) && !',)-='.includes(ch) && !Match_1.default.isSpace(ch),
        [token_1.TokenKind.Description]: !Match_1.default.isLineTerminator(ch) && !Match_1.default.isNullTerminator(ch)
    }[kind]);
    const consume = (kind) => {
        while (filter(kind, current()) && !isEOF()) {
            _lexeme.push(accept());
        }
        const { Any, Ampersand, Pipe, Identifier, LeftParen } = token_1.TokenKind;
        if (kind === Identifier) {
            // Skip whitespace
            while (Match_1.default.isWhiteSpace(current())) {
                next();
            }
            // ... =>  (... | any) || (... & any )
            if (_previousToken && _previousToken.kind === LeftParen) {
                if ('&|'.includes(current())) {
                    kind = Any;
                }
            }
            else if (_previousToken && _.includes([Pipe, Ampersand], _previousToken.kind)) {
                kind = Any;
            }
        }
        return new token_1.default(_lexeme.join(''), kind, location_1.location(_position, _line, _column));
    };
    const { Tag, LeftParen, Comma } = token_1.TokenKind;
    if (_previousToken && _.includes([Tag, LeftParen, Comma], _previousToken.kind)) {
        return consume(token_1.TokenKind.Identifier);
    }
    const { Colon, Arrow, Pipe, Ampersand } = token_1.TokenKind;
    if (_previousToken && _.includes([Colon, Arrow, Pipe, Ampersand], _previousToken.kind)) {
        return consume(token_1.TokenKind.Any);
    }
    if (_previousToken && _previousToken.kind === token_1.TokenKind.Equal) {
        return consume(token_1.TokenKind.Initializer);
    }
    return consume(token_1.TokenKind.Description);
}
function scanSimpleChar() {
    const ch = accept();
    const kind = token_1.getTokenKind(ch);
    return new token_1.default(ch, kind, location_1.location(_position, _line, _column));
}
function scanTag() {
    while (current() !== ':' && !Match_1.default.isSpace(current())) {
        _lexeme.push(accept());
    }
    return new token_1.default(_lexeme.join(''), token_1.TokenKind.Tag, location_1.location(_position, _line, _column));
}
function scanMinus() {
    const isInitializer = _previousToken &&
        _previousToken.kind === token_1.TokenKind.Equal &&
        current() === '-' && Match_1.default.isDigit(peek(1));
    let kind = token_1.TokenKind.None;
    if (isInitializer) {
        _lexeme.push(accept());
        while (Match_1.default.isDigit(current())) {
            _lexeme.push(accept());
        }
        kind = token_1.TokenKind.Initializer;
    }
    else {
        _lexeme.push(accept());
        kind = token_1.TokenKind.Minus;
    }
    return new token_1.default(_lexeme.join(''), kind, location_1.location(_position, _line, _column));
}
function scanMarkdown() {
    const isMarkdownTag = (m1, m2, m3) => m1 + m2 + m3 === '+--';
    // const isCommentStar = (col: number): boolean => (col === 0 || col === 1) && current() === '*';
    // let starEnabled: boolean = peek(-1) === '*';
    let distance = peek(-1) === '*' ? _column - 1 : null;
    distance = peek(-2) === '*' ? _column - 2 : distance;
    // Consume the first three lexemes
    consume(3, _lexeme);
    // Keep consuming the lexemes until markdown ends
    while (!isMarkdownTag(current(), peek(1), peek(2))) {
        if (distance && distance === _column && current() === '*') {
            next();
        }
        else {
            _lexeme.push(accept());
        }
    }
    // Consume the last three lexemes
    if (isMarkdownTag(current(), peek(1), peek(2))) {
        consume(3, _lexeme);
    }
    return new token_1.default(_lexeme.join(''), token_1.TokenKind.Markdown, location_1.location(_position, _line, _column));
}
function scanEqualOrArrow() {
    const lexeme = peek(1) === '>' ? accept() + accept() : accept();
    return new token_1.default(lexeme, token_1.getTokenKind(lexeme), location_1.location(_position, _line, _column));
}
function scanParenthesis() {
    const lexeme = accept();
    const kind = lexeme === '(' ? token_1.TokenKind.LeftParen : token_1.TokenKind.RightParen;
    return new token_1.default(lexeme, kind, location_1.location(_position, _line, _column));
}
function Scanner(source) {
    _position = 0;
    _line = _column = 1;
    _stream = source ? `${source}\u{0000}` : '\u{0000}';
    _tokens = [];
    _previousToken = null;
    return {
        scan: () => _previousToken = scan(),
        toTokenStream: function toTokenStream() {
            let token = _previousToken = scan();
            while (token.kind !== token_1.TokenKind.EOF) {
                if (token.kind !== token_1.TokenKind.None) {
                    _tokens.push(token);
                }
                token = _previousToken = scan();
            }
            return new _1.TokenStream(_tokens);
        },
        position: function position() { return _position; },
        line: function line() { return _line; },
        column: function column() { return _column; },
        eof: isEOF
    };
}
exports.default = Scanner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUEwRDtBQUMxRCxpQ0FBeUM7QUFDekMsMENBQXVDO0FBQ3ZDLDBDQUFtQztBQUNuQyw0QkFBNEI7QUFFNUIsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLENBQUMsQ0FBQztBQUMxQyxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDakIsSUFBSSxPQUFpQixFQUFFLE9BQU8sR0FBWSxFQUFFLENBQUM7QUFDN0MsSUFBSSxjQUFxQixDQUFDO0FBRTFCLG1CQUFtQixNQUFNLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM1RCxxQkFBNkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekQ7SUFDRSxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNoQyxFQUFFLENBQUMsQ0FBQyxlQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsS0FBSyxFQUFFLENBQUM7UUFBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUN6RCxJQUFJLENBQUMsQ0FBQztRQUFDLE9BQU8sRUFBRSxDQUFDO0lBQUMsQ0FBQztJQUNuQixNQUFNLENBQUMsRUFBRSxDQUFDO0FBQ1osQ0FBQztBQUNEO0lBQ0UsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLENBQUMsZUFBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLEtBQUssRUFBRSxDQUFDO1FBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUFDLENBQUM7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