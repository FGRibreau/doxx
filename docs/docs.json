[
  {
    "description": "Parse the CLI arguments.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 17,
        "column": 2
      },
      "end": {
        "line": 20,
        "column": 5
      }
    },
    "context": {
      "code": "static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }",
      "file": {
        "id": "rJYUXB5-",
        "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
        "base": "src/",
        "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
        "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n",
        "ref": [
          {
            "rJYUXB5-": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n"
            }
          },
          {
            "B1xFI7r5W": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/utils/log.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Utils = require('mr-doc-utils');\nconst log = new Utils.Log();\nconst _ = require('lodash');\n\nclass Log {\n  constructor() {\n    return log;\n  }\n  static setup(options) {\n    if (options.silent) {\n      log.on('error', () => { /* NOOP */});\n    }\n    Log.levels(options.level)\n    .forEach(level => {\n      if (level === 'error') Log.error();\n      else Log.other(level);\n    });\n  }\n  static levels(level) {\n    const levels = _.isString(level) ? level.split(',') : level;\n    return levels.map(i => i.replace(/\\s/g, ''));\n  }\n  static error() {\n    log.on('error', function error() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args.map(i => Log.color.red(i)));\n      /* eslint-enable no-console */\n    });\n  }\n  static other(level) {\n    log.on(level, function logger() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args);\n      /* eslint-enable no-console */\n    });\n  }\n  static get color() {\n    return Utils.Log.color;\n  }\n}\n\nmodule.exports = Log;\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 21,
          "column": 2
        },
        "end": {
          "line": 27,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          21,
          27
        ]
      }
    }
  },
  {
    "description": "Setup the logger.",
    "tags": [
      {
        "title": "param",
        "description": "The parsed CLI arguments.",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "options"
      },
      {
        "title": "returns",
        "description": "A promise to the options.",
        "lineNumber": 3,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Promise"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "options"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 28,
        "column": 2
      },
      "end": {
        "line": 32,
        "column": 5
      }
    },
    "context": {
      "code": "static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }",
      "file": {
        "id": "rJYUXB5-",
        "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
        "base": "src/",
        "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
        "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n",
        "ref": [
          {
            "rJYUXB5-": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n"
            }
          },
          {
            "B1xFI7r5W": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/utils/log.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Utils = require('mr-doc-utils');\nconst log = new Utils.Log();\nconst _ = require('lodash');\n\nclass Log {\n  constructor() {\n    return log;\n  }\n  static setup(options) {\n    if (options.silent) {\n      log.on('error', () => { /* NOOP */});\n    }\n    Log.levels(options.level)\n    .forEach(level => {\n      if (level === 'error') Log.error();\n      else Log.other(level);\n    });\n  }\n  static levels(level) {\n    const levels = _.isString(level) ? level.split(',') : level;\n    return levels.map(i => i.replace(/\\s/g, ''));\n  }\n  static error() {\n    log.on('error', function error() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args.map(i => Log.color.red(i)));\n      /* eslint-enable no-console */\n    });\n  }\n  static other(level) {\n    log.on(level, function logger() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args);\n      /* eslint-enable no-console */\n    });\n  }\n  static get color() {\n    return Utils.Log.color;\n  }\n}\n\nmodule.exports = Log;\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 33,
          "column": 2
        },
        "end": {
          "line": 44,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          33,
          44
        ]
      }
    }
  },
  {
    "description": "Create the CLI.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "returns",
        "description": "An instance of Liftoff.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Liftoff"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 45,
        "column": 2
      },
      "end": {
        "line": 49,
        "column": 5
      }
    },
    "context": {
      "code": "static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }",
      "file": {
        "id": "rJYUXB5-",
        "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
        "base": "src/",
        "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
        "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n",
        "ref": [
          {
            "rJYUXB5-": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n"
            }
          },
          {
            "B1xFI7r5W": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/utils/log.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Utils = require('mr-doc-utils');\nconst log = new Utils.Log();\nconst _ = require('lodash');\n\nclass Log {\n  constructor() {\n    return log;\n  }\n  static setup(options) {\n    if (options.silent) {\n      log.on('error', () => { /* NOOP */});\n    }\n    Log.levels(options.level)\n    .forEach(level => {\n      if (level === 'error') Log.error();\n      else Log.other(level);\n    });\n  }\n  static levels(level) {\n    const levels = _.isString(level) ? level.split(',') : level;\n    return levels.map(i => i.replace(/\\s/g, ''));\n  }\n  static error() {\n    log.on('error', function error() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args.map(i => Log.color.red(i)));\n      /* eslint-enable no-console */\n    });\n  }\n  static other(level) {\n    log.on(level, function logger() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args);\n      /* eslint-enable no-console */\n    });\n  }\n  static get color() {\n    return Utils.Log.color;\n  }\n}\n\nmodule.exports = Log;\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 50,
          "column": 2
        },
        "end": {
          "line": 57,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          50,
          57
        ]
      }
    }
  },
  {
    "description": "Launch the CLI.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      },
      {
        "title": "param",
        "description": "The parsed CLI arguments.",
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "options"
      },
      {
        "title": "returns",
        "description": "A promise to the stream.",
        "lineNumber": 4,
        "type": {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Promise"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "Stream"
            }
          ]
        }
      }
    ],
    "loc": {
      "start": {
        "line": 58,
        "column": 2
      },
      "end": {
        "line": 63,
        "column": 5
      }
    },
    "context": {
      "code": "static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }",
      "file": {
        "id": "rJYUXB5-",
        "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
        "base": "src/",
        "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
        "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n",
        "ref": [
          {
            "rJYUXB5-": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n"
            }
          },
          {
            "B1xFI7r5W": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/utils/log.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Utils = require('mr-doc-utils');\nconst log = new Utils.Log();\nconst _ = require('lodash');\n\nclass Log {\n  constructor() {\n    return log;\n  }\n  static setup(options) {\n    if (options.silent) {\n      log.on('error', () => { /* NOOP */});\n    }\n    Log.levels(options.level)\n    .forEach(level => {\n      if (level === 'error') Log.error();\n      else Log.other(level);\n    });\n  }\n  static levels(level) {\n    const levels = _.isString(level) ? level.split(',') : level;\n    return levels.map(i => i.replace(/\\s/g, ''));\n  }\n  static error() {\n    log.on('error', function error() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args.map(i => Log.color.red(i)));\n      /* eslint-enable no-console */\n    });\n  }\n  static other(level) {\n    log.on(level, function logger() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args);\n      /* eslint-enable no-console */\n    });\n  }\n  static get color() {\n    return Utils.Log.color;\n  }\n}\n\nmodule.exports = Log;\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 64,
          "column": 2
        },
        "end": {
          "line": 76,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          64,
          76
        ]
      }
    }
  },
  {
    "description": "Handle the result from the CLI.",
    "tags": [
      {
        "title": "static",
        "description": null,
        "lineNumber": 2
      }
    ],
    "loc": {
      "start": {
        "line": 77,
        "column": 2
      },
      "end": {
        "line": 80,
        "column": 5
      }
    },
    "context": {
      "code": "static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }",
      "file": {
        "id": "rJYUXB5-",
        "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
        "base": "src/",
        "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
        "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n",
        "ref": [
          {
            "rJYUXB5-": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/cli/index.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Source = require('mr-doc-utils').Source;\nconst Log = require('../utils/log');\nconst Liftoff = require('liftoff');\nconst Option = require('mr-doc-utils').Option;\nconst Promise = require('bluebird');\nconst Yargs = require('yargs');\nconst ViynlFS = require('vinyl-fs');\nconst _ = require('lodash');\nconst pkg = require('../../package.json');\nconst rc = require('rc');\nconst log = new Log();\n\nclass CLI {\n  /**\n   * Parse the CLI arguments.\n   * @static\n   */\n  static parse() {\n    return Promise.resolve(Yargs\n    .usage('Usage: mrdoc [options]', Option.cli)\n    .help('help', Log.color.gray('Show help.'))\n    .alias('help', 'h')\n    .argv);\n  }\n  /**\n   * Setup the logger.\n   * @param  {Object} options - The parsed CLI arguments.\n   * @return {Promise<options>} - A promise to the options.\n   */\n  static log(options) {\n    return Promise.resolve((() => {\n      // Get log level.\n      const level = options.level || options.l || Option.defaults.log.level;\n      // Set up the logger.\n      Log.setup({\n        level: level !== 'silent' ? level : '',\n        silent: level === 'silent',\n      });\n      return options;\n    })());\n  }\n  /**\n   * Create the CLI.\n   * @static\n   * @return {Liftoff} - An instance of Liftoff.\n   */\n  static get rocket() {\n    // Create the CLI.\n    return new Liftoff({\n      name: 'mrdoc',\n      processTitle: 'mrdoc',\n      v8flags: require('v8flags'),\n    });\n  }\n  /**\n   * Launch the CLI.\n   * @static\n   * @param {Object} options - The parsed CLI arguments.\n   * @return {Promise<Stream>} - A promise to the stream.\n   */\n  static launch(options) {\n    // DEBUG: Launch\n    log.debug(Log.color.blue('Launching CLI'));\n    return new Promise((resolve, reject) => {\n      // Launch the CLI\n      CLI.rocket.launch({\n        cwd: options.cwd,\n        configPath: options.mrdocrc,\n      }, env => CLI.handler(env, options)\n      .then(stream => resolve(stream))\n      .catch(error => reject(error)));\n    });\n  }\n  /**\n   * Handle the result from the CLI.\n   * @static\n   */\n  static handler(env, options) {\n    const version = options.version || options.v;\n    const source = options.source || options.s;\n    if (version) {\n      log.info(`${Log.color.blue('version:')} ${pkg.version}`);\n      process.exit();\n    }\n    if (_.isEmpty(source) && version === false) {\n      log.warn(`${Log.color.yellow('No source specified!')} See --help for usage.`);\n      process.exit();\n    }\n    return new Promise((resolve, reject) => {\n      // Normalize the source's path(s).\n      const sources = Source.normalizePath(source, Option.normalize(rc('mrdoc', options)));\n      // DEBUG: Sources\n      log.debug(Log.color.blue('Sources:'), sources);\n      if (sources.indexOf(null) > -1) {\n        reject(`${_.isArray(sources) ? sources.join(', ') : sources} does not exist!`);\n      } else resolve({ stream: ViynlFS.src(sources, { cwd: options.cwd }), options });\n    });\n  }\n}\n\nmodule.exports = CLI;\n"
            }
          },
          {
            "B1xFI7r5W": {
              "cwd": "/Users/iwatakeshi/Documents/GitHub/mr-doc",
              "base": "src/",
              "path": "/Users/iwatakeshi/Documents/GitHub/mr-doc/src/utils/log.js",
              "source": "/* eslint-env node */\n'use strict';\n\nconst Utils = require('mr-doc-utils');\nconst log = new Utils.Log();\nconst _ = require('lodash');\n\nclass Log {\n  constructor() {\n    return log;\n  }\n  static setup(options) {\n    if (options.silent) {\n      log.on('error', () => { /* NOOP */});\n    }\n    Log.levels(options.level)\n    .forEach(level => {\n      if (level === 'error') Log.error();\n      else Log.other(level);\n    });\n  }\n  static levels(level) {\n    const levels = _.isString(level) ? level.split(',') : level;\n    return levels.map(i => i.replace(/\\s/g, ''));\n  }\n  static error() {\n    log.on('error', function error() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args.map(i => Log.color.red(i)));\n      /* eslint-enable no-console */\n    });\n  }\n  static other(level) {\n    log.on(level, function logger() {\n      /* eslint-disable no-console */\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(Log.color.cyan('mrdoc'));\n      console.log.apply(console, args);\n      /* eslint-enable no-console */\n    });\n  }\n  static get color() {\n    return Utils.Log.color;\n  }\n}\n\nmodule.exports = Log;\n"
            }
          }
        ]
      },
      "loc": {
        "start": {
          "line": 81,
          "column": 2
        },
        "end": {
          "line": 101,
          "column": 3
        }
      },
      "range": {
        "column": [
          2,
          3
        ],
        "line": [
          81,
          101
        ]
      }
    }
  }
]